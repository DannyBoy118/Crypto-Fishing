<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Crypto Fishing Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(#87ceeb, #ffffff);
      text-align: center;
      padding: 20px;
      margin: 0;
      min-height: 100vh;
    }
    #lakeCanvas {
      width: 80%;
      max-width: 800px;
      height: 300px;
      margin: 20px auto;
      border-radius: 10px;
      border: 2px solid #333;
      display: block;
    }
    .ripple {
      position: absolute;
      background: rgba(255, 255, 255, 0.5);
      border-radius: 50%;
      transform: scale(0);
      animation: ripple 0.6s linear;
      pointer-events: none;
    }
    @keyframes ripple {
      to {
        transform: scale(4);
        opacity: 0;
      }
    }
    #castBtn, .upgradeBtn {
      padding: 10px 20px;
      font-size: 18px;
      cursor: pointer;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 5px;
      transition: background-color 0.2s;
      margin: 5px;
    }
    #castBtn:hover, .upgradeBtn:hover {
      background-color: #218838;
    }
    #dialogue, .upgradeDialogue {
      display: none;
      background-color: #f8f9fa;
      padding: 20px;
      margin: 20px auto;
      width: 60%;
      max-width: 600px;
      border: 2px solid #333;
      border-radius: 10px;
      text-align: left;
    }
    .upgradeDialogue {
      position: absolute;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      z-index: 10;
    }
    #score, #valueCounter {
      font-size: 18px;
      margin: 10px 0;
    }
    .crypto-logo {
      width: 40px;
      vertical-align: middle;
      margin-right: 10px;
    }
    .upgradeOption {
      margin: 10px 0;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
    .locked {
      opacity: 0.3;
      pointer-events: none;
    }
    .unlocked {
      opacity: 1;
    }
    #upgradeMenu {
      margin: 20px auto;
      width: 80%;
      max-width: 800px;
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
    }
    @media (max-width: 600px) {
      #lakeCanvas {
        width: 90%;
        height: 200px;
      }
      #dialogue, .upgradeDialogue {
        width: 80%;
      }
      #castBtn, .upgradeBtn {
        font-size: 16px;
        padding: 8px 16px;
      }
    }
  </style>
</head>
<body>
  <h1>Crypto Fishing Game ðŸŽ£</h1>
  <p>Cast your line to catch crypto fish and upgrade your gear!</p>
  <p id="score">Cryptos Caught: 0</p>
  <p id="valueCounter">Total Value: $0.00 (SHIB: 0, JASMY: 0, LINK: 0, ETH: 0, BTC: 0)</p>
  <canvas id="lakeCanvas"></canvas>
  <div id="upgradeMenu">
    <button class="upgradeBtn" onclick="showUpgradeDialogue('boat')">Boat Upgrades</button>
    <button class="upgradeBtn" onclick="showUpgradeDialogue('pole')">Fishing Pole Upgrades</button>
    <button class="upgradeBtn" onclick="showUpgradeDialogue('lake')">Lake Upgrades</button>
  </div>
  <button id="castBtn">Cast Line</button>
  <div id="dialogue"></div>
  <div id="boatDialogue" class="upgradeDialogue"></div>
  <div id="poleDialogue" class="upgradeDialogue"></div>
  <div id="lakeDialogue" class="upgradeDialogue"></div>
  <audio id="splashSound" src="https://www.soundjay.com/buttons/splash-01.mp3"></audio>

  <script>
    const cryptos = [
      { level: 1, name: 'Shiba Inu', symbol: 'SHIB', price: 0.00002, rank: 11, type: 'Meme', team: 'Ryoshi', logo: 'https://assets.coingecko.com/coins/images/11939/thumb/shiba.png', summary: 'A meme coin launched as a joke but grew a strong community.', value: 0.00002 },
      { level: 2, name: 'JasmyCoin', symbol: 'JASMY', price: 0.016, rank: 134, type: 'IoT', team: 'Kunitake Ando', logo: 'https://assets.coingecko.com/coins/images/13868/thumb/JASMY2021.png', summary: 'Focused on decentralized IoT data storage.', value: 0.016 },
      { level: 3, name: 'Chainlink', symbol: 'LINK', price: 14.32, rank: 21, type: 'Oracle', team: 'Sergey Nazarov', logo: 'https://assets.coingecko.com/coins/images/877/thumb/chainlink-new-logo.png', summary: 'A decentralized oracle network providing external data to smart contracts.', value: 14.32 },
      { level: 4, name: 'Ethereum', symbol: 'ETH', price: 3350.00, rank: 2, type: 'Layer 1', team: 'Vitalik Buterin', logo: 'https://assets.coingecko.com/coins/images/279/thumb/ethereum.png', summary: 'Decentralized platform for smart contracts and dApps.', value: 3350.00 },
      { level: 5, name: 'Bitcoin', symbol: 'BTC', price: 64000.00, rank: 1, type: 'Store of Value', team: 'Satoshi Nakamoto', logo: 'https://assets.coingecko.com/coins/images/1/thumb/bitcoin.png', summary: 'The original cryptocurrency and most valuable digital asset.', value: 64000.00 }
    ];

    const upgrades = {
      boat: [
        { level: 1, name: 'Raft', cost: 0, luck: 0, description: 'Basic raft, no bonuses.', unlocked: true },
        { level: 2, name: 'Rowboat', cost: 100, luck: 0.05, description: 'Slightly increases catch chance.', unlocked: false },
        { level: 3, name: 'Speedboat', cost: 5000, luck: 0.1, description: 'Moderately increases catch chance.', unlocked: false },
        { level: 4, name: 'Yacht', cost: 50000, luck: 0.15, description: 'Greatly increases catch chance.', unlocked: false },
        { level: 5, name: 'Crypto Cruiser', cost: 100000, luck: 0.2, description: 'Maximizes catch chance.', unlocked: false }
      ],
      pole: [
        { level: 1, name: 'Stick Pole', cost: 0, luck: 0, description: 'Basic pole, no bonuses.', unlocked: true },
        { level: 2, name: 'Bamboo Rod', cost: 50, luck: 0.05, description: 'Slightly increases catch chance.', unlocked: false },
        { level: 3, name: 'Carbon Fiber Rod', cost: 2000, luck: 0.1, description: 'Moderately increases catch chance.', unlocked: false },
        { level: 4, name: 'Smart Rod', cost: 20000, luck: 0.15, description: 'Greatly increases catch chance.', unlocked: false },
        { level: 5, name: 'Quantum Rod', cost: 75000, luck: 0.2, description: 'Maximizes catch chance.', unlocked: false }
      ],
      lake: [
        { level: 1, name: 'Pond', cost: 0, luck: 0, description: 'Basic lake, no bonuses.', unlocked: true },
        { level: 2, name: 'Lake', cost: 200, luck: 0.05, description: 'Slightly increases catch chance.', unlocked: false },
        { level: 3, name: 'Deep Lake', cost: 10000, luck: 0.1, description: 'Moderately increases catch chance.', unlocked: false },
        { level: 4, name: 'Ocean', cost: 75000, luck: 0.15, description: 'Greatly increases catch chance.', unlocked: false },
        { level: 5, name: 'Crypto Sea', cost: 150000, luck: 0.2, description: 'Maximizes catch chance.', unlocked: false }
      ]
    };

    const weights = [60, 20, 10, 7, 3];
    const totalWeight = weights.reduce((acc, val) => acc + val);
    let catchCount = parseInt(localStorage.getItem('catchCount')) || 0;
    let totalValue = parseFloat(localStorage.getItem('totalValue')) || 0;
    let cryptoCounts = JSON.parse(localStorage.getItem('cryptoCounts')) || { SHIB: 0, JASMY: 0, LINK: 0, ETH: 0, BTC: 0 };
    let currentUpgrades = JSON.parse(localStorage.getItem('currentUpgrades')) || { boat: 1, pole: 1, lake: 1 };

    const canvas = document.getElementById('lakeCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = 800;
    canvas.height = 300;
    let boatX = canvas.width / 2;
    let boatY = canvas.height / 2;

    function drawLake() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradient.addColorStop(0, '#1e90ff');
      gradient.addColorStop(0.5, '#4682b4');
      gradient.addColorStop(1, '#2f4f4f');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      ctx.beginPath();
      ctx.arc(canvas.width / 4, canvas.height / 3, 50, 0, Math.PI * 2);
      ctx.fillStyle = 'rgba(0, 0, 139, 0.3)';
      ctx.fill();

      ctx.beginPath();
      ctx.arc(canvas.width * 3 / 4, canvas.height * 2 / 3, 70, 0, Math.PI * 2);
      ctx.fillStyle = 'rgba(0, 0, 139, 0.4)';
      ctx.fill();

      ctx.beginPath();
      ctx.moveTo(boatX - 20, boatY + 10);
      ctx.lineTo(boatX, boatY - 20);
      ctx.lineTo(boatX + 20, boatY + 10);
      ctx.closePath();
      ctx.fillStyle = currentUpgrades.boat === 1 ? '#8b4513' : currentUpgrades.boat === 2 ? '#228b22' : currentUpgrades.boat === 3 ? '#ff4500' : currentUpgrades.boat === 4 ? '#ffd700' : '#00b7eb';
      ctx.fill();
    }

    function createRipple(x, y) {
      const ripple = document.createElement('div');
      ripple.classList.add('ripple');
      ripple.style.width = ripple.style.height = '50px';
      ripple.style.left = `${x - 25}px`;
      ripple.style.top = `${y - 25}px`;
      canvas.parentElement.appendChild(ripple);
      setTimeout(() => ripple.remove(), 600);
    }

    function updateScore() {
      catchCount++;
      localStorage.setItem('catchCount', catchCount);
      document.getElementById('score').textContent = `Cryptos Caught: ${catchCount}`;
    }

    function updateValue(caught) {
      totalValue += caught.value;
      cryptoCounts[caught.symbol]++;
      localStorage.setItem('totalValue', totalValue.toFixed(2));
      localStorage.setItem('cryptoCounts', JSON.stringify(cryptoCounts));
      document.getElementById('valueCounter').textContent = `Total Value: $${totalValue.toLocaleString('en-US', { minimumFractionDigits: 2 })} (SHIB: ${cryptoCounts.SHIB}, JASMY: ${cryptoCounts.JASMY}, LINK: ${cryptoCounts.LINK}, ETH: ${cryptoCounts.ETH}, BTC: ${cryptoCounts.BTC})`;
    }

    function checkUpgrades() {
      for (let category in upgrades) {
        upgrades[category].forEach(upgrade => {
          upgrade.unlocked = totalValue >= upgrade.cost;
        });
      }
    }

    function showUpgradeDialogue(category) {
      const dialogues = {
        boat: document.getElementById('boatDialogue'),
        pole: document.getElementById('poleDialogue'),
        lake: document.getElementById('lakeDialogue')
      };
      for (let key in dialogues) {
        dialogues[key].style.display = key === category ? 'block' : 'none';
      }
      const dialogue = dialogues[category];
      dialogue.innerHTML = `<h3>${category.charAt(0).toUpperCase() + category.slice(1)} Upgrades</h3>`;
      upgrades[category].forEach(upgrade => {
        const isCurrent = currentUpgrades[category] === upgrade.level;
        dialogue.innerHTML += `
          <div class="upgradeOption ${upgrade.unlocked ? 'unlocked' : 'locked'}">
            <p><strong>${upgrade.name}</strong> (Level ${upgrade.level})</p>
            <p>Cost: $${upgrade.cost.toLocaleString()}</p>
            <p>Luck Bonus: +${(upgrade.luck * 100).toFixed(0)}%</p>
            <p>${upgrade.description}</p>
            ${upgrade.unlocked && !isCurrent ? `<button onclick="buyUpgrade('${category}', ${upgrade.level})">Buy</button>` : isCurrent ? '<p>Equipped</p>' : ''}
          </div>
        `;
      });
    }

    function buyUpgrade(category, level) {
      const upgrade = upgrades[category].find(u => u.level === level);
      if (totalValue >= upgrade.cost && currentUpgrades[category] < level) {
        totalValue -= upgrade.cost;
        currentUpgrades[category] = level;
        localStorage.setItem('totalValue', totalValue.toFixed(2));
        localStorage.setItem('currentUpgrades', JSON.stringify(currentUpgrades));
        updateValueCounter();
        showUpgradeDialogue(category);
        drawLake();
      }
    }

    function updateValueCounter() {
      document.getElementById('valueCounter').textContent = `Total Value: $${totalValue.toLocaleString('en-US', { minimumFractionDigits: 2 })} (SHIB: ${cryptoCounts.SHIB}, JASMY: ${cryptoCounts.JASMY}, LINK: ${cryptoCounts.LINK}, ETH: ${cryptoCounts.ETH}, BTC: ${cryptoCounts.BTC})`;
    }

    async function fetchLivePrice(symbol) {
      try {
        const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${symbol.toLowerCase()}&vs_currencies=usd`);
        const data = await response.json();
        return data[symbol.toLowerCase()]?.usd || null;
      } catch (error) {
        console.error('Error fetching price:', error);
        return null;
      }
    }

    function adjustWeights() {
      const totalLuck = upgrades.boat.find(u => u.level === currentUpgrades.boat).luck +
                        upgrades.pole.find(u => u.level === currentUpgrades.pole).luck +
                        upgrades.lake.find(u => u.level === currentUpgrades.lake).luck;
      return weights.map((weight, i) => weight * (1 + totalLuck * (5 - i)));
    }

    async function castLine(event) {
      const rect = canvas.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;
      createRipple(x, y);

      const splashSound = document.getElementById('splashSound');
      splashSound.play().catch(() => console.log('Audio playback failed'));

      const adjustedWeights = adjustWeights();
      const totalAdjusted = adjustedWeights.reduce((acc, val) => acc + val);
      let rand = Math.random() * totalAdjusted;
      let sum = 0;
      let index = 0;
      for (let i = 0; i < adjustedWeights.length; i++) {
        sum += adjustedWeights[i];
        if (rand < sum) {
          index = i;
          break;
        }
      }

      const caught = cryptos[index];
      let price = caught.price;
      let value = caught.value;

      const livePrice = await fetchLivePrice(caught.symbol);
      if (livePrice !== null) {
        price = livePrice;
        value = livePrice;
      }

      updateScore();
      updateValue({ ...caught, value });
      checkUpgrades();

      const dialogue = document.getElementById('dialogue');
      dialogue.innerHTML = `
        <h3>You caught a ${caught.name} (${caught.symbol})!</h3>
        <img src="${caught.logo}" class="crypto-logo" onerror="this.src='https://via.placeholder.com/40'">
        <p><strong>Price:</strong> $${price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 8 })}</p>
        <p><strong>Market Cap Rank:</strong> ${caught.rank}</p>
        <p><strong>Type:</strong> ${caught.type}</p>
        <p><strong>Team:</strong> ${caught.team}</p>
        <p><strong>Summary:</strong> ${caught.summary}</p>
      `;
      dialogue.style.display = 'block';
      drawLake();
    }

    document.getElementById('score').textContent = `Cryptos Caught: ${catchCount}`;
    updateValueCounter();
    checkUpgrades();
    drawLake();
    document.getElementById('castBtn').addEventListener('click', castLine);
  </script>
</body>
</html>